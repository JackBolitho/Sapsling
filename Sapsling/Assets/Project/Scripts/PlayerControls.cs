//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Project/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""9066ce21-5ca0-4b1c-8fcf-d16d9c3f2234"",
            ""actions"": [
                {
                    ""name"": ""DragClick"",
                    ""type"": ""Value"",
                    ""id"": ""6924e6c8-ed15-418a-8425-66ae7d56cd12"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""edcba1ec-3e7f-44c3-9745-2c883e4c1c2d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SeedSpecialAbility"",
                    ""type"": ""Button"",
                    ""id"": ""ba02aad8-959e-416e-bd4b-610f7f5c8a29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""7979b24b-7769-4872-9bc2-3da4003dda05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackToLevelSelect"",
                    ""type"": ""Button"",
                    ""id"": ""b629356f-56b8-4453-92c0-b6859a17588c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""6937e983-3826-4cad-95c2-6ec98fbee5ef"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragClick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""9c5907aa-cf08-463d-8eab-112bc23b83d2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""a4767bb7-77f6-431a-8cb5-5828295d2abf"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""bb300701-5df9-441e-ae76-cdf344f463d6"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragClick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""6564d74c-67d6-490b-b3bc-ceb39a5e2ddf"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""12acb61c-42af-48b2-bd43-30584d682ab2"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""feefc4dc-dd9a-425b-9fa3-7f0e62d3ac1c"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac1cb6a1-eabe-4796-ad93-d66d64754fcc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SeedSpecialAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85ece965-b250-4ddb-97f3-5242549b4b09"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfabbd48-6014-4493-94f1-6c95b4b46fde"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackToLevelSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""e392e4d2-dd0f-4b73-95e5-d6b9d6fa4d05"",
            ""actions"": [
                {
                    ""name"": ""destroyCurrentSeed"",
                    ""type"": ""Button"",
                    ""id"": ""92523e82-ad95-4db3-88e9-a88d656656e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be80042f-6070-47d9-9876-716e9895a842"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""destroyCurrentSeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_DragClick = m_Game.FindAction("DragClick", throwIfNotFound: true);
        m_Game_ZoomCamera = m_Game.FindAction("ZoomCamera", throwIfNotFound: true);
        m_Game_SeedSpecialAbility = m_Game.FindAction("SeedSpecialAbility", throwIfNotFound: true);
        m_Game_Restart = m_Game.FindAction("Restart", throwIfNotFound: true);
        m_Game_BackToLevelSelect = m_Game.FindAction("BackToLevelSelect", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_destroyCurrentSeed = m_Debug.FindAction("destroyCurrentSeed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_DragClick;
    private readonly InputAction m_Game_ZoomCamera;
    private readonly InputAction m_Game_SeedSpecialAbility;
    private readonly InputAction m_Game_Restart;
    private readonly InputAction m_Game_BackToLevelSelect;
    public struct GameActions
    {
        private @PlayerControls m_Wrapper;
        public GameActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DragClick => m_Wrapper.m_Game_DragClick;
        public InputAction @ZoomCamera => m_Wrapper.m_Game_ZoomCamera;
        public InputAction @SeedSpecialAbility => m_Wrapper.m_Game_SeedSpecialAbility;
        public InputAction @Restart => m_Wrapper.m_Game_Restart;
        public InputAction @BackToLevelSelect => m_Wrapper.m_Game_BackToLevelSelect;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @DragClick.started += instance.OnDragClick;
            @DragClick.performed += instance.OnDragClick;
            @DragClick.canceled += instance.OnDragClick;
            @ZoomCamera.started += instance.OnZoomCamera;
            @ZoomCamera.performed += instance.OnZoomCamera;
            @ZoomCamera.canceled += instance.OnZoomCamera;
            @SeedSpecialAbility.started += instance.OnSeedSpecialAbility;
            @SeedSpecialAbility.performed += instance.OnSeedSpecialAbility;
            @SeedSpecialAbility.canceled += instance.OnSeedSpecialAbility;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
            @BackToLevelSelect.started += instance.OnBackToLevelSelect;
            @BackToLevelSelect.performed += instance.OnBackToLevelSelect;
            @BackToLevelSelect.canceled += instance.OnBackToLevelSelect;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @DragClick.started -= instance.OnDragClick;
            @DragClick.performed -= instance.OnDragClick;
            @DragClick.canceled -= instance.OnDragClick;
            @ZoomCamera.started -= instance.OnZoomCamera;
            @ZoomCamera.performed -= instance.OnZoomCamera;
            @ZoomCamera.canceled -= instance.OnZoomCamera;
            @SeedSpecialAbility.started -= instance.OnSeedSpecialAbility;
            @SeedSpecialAbility.performed -= instance.OnSeedSpecialAbility;
            @SeedSpecialAbility.canceled -= instance.OnSeedSpecialAbility;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
            @BackToLevelSelect.started -= instance.OnBackToLevelSelect;
            @BackToLevelSelect.performed -= instance.OnBackToLevelSelect;
            @BackToLevelSelect.canceled -= instance.OnBackToLevelSelect;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private List<IDebugActions> m_DebugActionsCallbackInterfaces = new List<IDebugActions>();
    private readonly InputAction m_Debug_destroyCurrentSeed;
    public struct DebugActions
    {
        private @PlayerControls m_Wrapper;
        public DebugActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @destroyCurrentSeed => m_Wrapper.m_Debug_destroyCurrentSeed;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsCallbackInterfaces.Add(instance);
            @destroyCurrentSeed.started += instance.OnDestroyCurrentSeed;
            @destroyCurrentSeed.performed += instance.OnDestroyCurrentSeed;
            @destroyCurrentSeed.canceled += instance.OnDestroyCurrentSeed;
        }

        private void UnregisterCallbacks(IDebugActions instance)
        {
            @destroyCurrentSeed.started -= instance.OnDestroyCurrentSeed;
            @destroyCurrentSeed.performed -= instance.OnDestroyCurrentSeed;
            @destroyCurrentSeed.canceled -= instance.OnDestroyCurrentSeed;
        }

        public void RemoveCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IGameActions
    {
        void OnDragClick(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
        void OnSeedSpecialAbility(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnBackToLevelSelect(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnDestroyCurrentSeed(InputAction.CallbackContext context);
    }
}
